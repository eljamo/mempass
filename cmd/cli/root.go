package cli

import (
	"fmt"
	"os"
	"strings"

	"github.com/eljamo/libpass/v2/config"
	"github.com/eljamo/libpass/v2/service"
	"github.com/spf13/cobra"
)

var version = "1.3.0"

var rootCmd = &cobra.Command{
	Use:          "mempass",
	Version:      version,
	Short:        "A memorable password generator",
	Long:         `A memorable password generator, a CLI version of xkpasswd.net written in Go`,
	SilenceUsage: true, // do not print usage when an error occurs since usage is large and distracts from the error
	RunE: func(cmd *cobra.Command, args []string) error {
		cfg, err := generateConfig(cmd, args)
		if err != nil {
			return err
		}

		pgs, err := service.NewPasswordGeneratorService(cfg)
		if err != nil {
			return err
		}

		pws, err := pgs.Generate()
		if err != nil {
			return err
		}

		for _, p := range pws {
			fmt.Println(p)
		}

		return nil
	},
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	ccss := strings.Join(config.Preset[:], ", ")
	pcasccss := strings.Join(config.PaddingCharacterAndSeparatorCharacter[:], ", ")
	ptcss := strings.Join(config.PaddingType[:], ", ")
	sccss := strings.Join(config.DefaultSpecialCharacters[:], ", ")
	ttcss := strings.Join(config.TransformType[:], ", ")
	wlcss := strings.Join(config.WordLists, ", ")

	// Preset and Custom Config Flags
	rootCmd.Flags().String(
		"custom_config_path", "",
		"custom config file path, you can use this to load a custom config. Such as ones generated by xkpasswd.net",
	)
	rootCmd.Flags().String(
		"preset", config.Default,
		fmt.Sprintf("use a built-in preset. Valid values: %s", ccss),
	)

	// Word List Flags
	rootCmd.Flags().String(
		"word_list", config.EN,
		fmt.Sprintf("use a built-in list of words. Valid values: %s", wlcss),
	)

	// Passwords Flags
	rootCmd.Flags().Int(
		"num_passwords", 3,
		"number of passwords to generate, valid values: 1+",
	)

	// Word Flags
	rootCmd.Flags().Int(
		"num_words", 3,
		"number of words, valid values: 2+",
	)
	rootCmd.Flags().String(
		"case_transform", config.Random,
		fmt.Sprintf("case transformation, allowed values: %s", ttcss),
	)
	rootCmd.Flags().Int(
		"word_length_min", 4,
		"minimum word length, valid values: 1+",
	)
	rootCmd.Flags().Int(
		"word_length_max", 8,
		"maximum word length, valid values: 1+",
	)

	// Seperator Flags
	rootCmd.Flags().StringSlice(
		"separator_alphabet",
		[]string{},
		fmt.Sprintf("comma-separated list of characters to separate password parts, example values: %s", sccss),
	)
	rootCmd.Flags().String(
		"separator_character",
		config.Random,
		fmt.Sprintf("character to separate password parts, example values: %s", pcasccss),
	)

	// Padding Flags
	rootCmd.Flags().Int(
		"pad_to_length", 0,
		"length to pad the password to, will be ignored if less than the generated password length, valid values: 0+",
	)
	rootCmd.Flags().String(
		"padding_character",
		config.Random,
		fmt.Sprintf("character to pad the password with, example values: %s", pcasccss),
	)
	rootCmd.Flags().Int(
		"padding_characters_after", 2,
		"number of characters to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		"padding_characters_before", 2,
		"number of characters to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		"padding_digits_after", 2,
		"number of digits to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		"padding_digits_before", 2,
		"number of digits to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().String(
		"padding_type", config.Fixed,
		fmt.Sprintf("padding type, allowed values: %s", ptcss),
	)
	rootCmd.Flags().StringSlice(
		"symbol_alphabet",
		[]string{},
		fmt.Sprintf("comma-separated list of characters to pad the password with, example values: %s", sccss),
	)
}
