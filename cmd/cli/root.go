package cli

import (
	"fmt"
	"os"
	"strings"

	"github.com/eljamo/libpass/v7/config"
	"github.com/eljamo/libpass/v7/config/option"
	"github.com/eljamo/libpass/v7/service"
	"github.com/spf13/cobra"
)

const version string = "1.13.1"

// Constant for the custom config path key
const customConfigPathKey string = "custom_config_path"

var rootCmd = &cobra.Command{
	Use:          "mempass",
	Version:      version,
	Short:        "A memorable password generator",
	Long:         `A memorable password generator, a CLI version of xkpasswd.net written in Go`,
	SilenceUsage: true, // do not print usage when an error occurs since usage is large and distracts from the error
	RunE:         runRootCmd,
}

func runRootCmd(cmd *cobra.Command, args []string) error {
	cfg, err := generateConfig(cmd)
	if err != nil {
		return fmt.Errorf("failed to generate config: %w", err)
	}

	pgs, err := service.NewPasswordGeneratorService(cfg)
	if err != nil {
		return fmt.Errorf("failed to create password generator service: %w", err)
	}

	pws, err := pgs.Generate()
	if err != nil {
		return fmt.Errorf("failed to generate passwords: %w", err)
	}

	for _, p := range pws {
		fmt.Println(p)
	}

	return nil
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}

func init() {
	defaultSettings := config.DefaultSettings()
	ccss := strings.Join(option.Presets, ", ")
	pco := strings.Join(option.PaddingCharacterOptions, ", ")
	sco := strings.Join(option.SeparatorCharacterOptions, ", ")
	ptcss := strings.Join(option.PaddingTypes, ", ")
	sccss := strings.Join(option.DefaultSpecialCharacters, ", ")
	ttcss := strings.Join(option.TransformTypes, ", ")
	wlcss := strings.Join(option.WordLists, ", ")

	// Preset and Custom Config Flags
	rootCmd.Flags().String(
		customConfigPathKey,
		"",
		"custom config file path, you can use this to load a custom config. Such as ones generated by xkpasswd.net",
	)
	rootCmd.Flags().String(
		option.ConfigKeyPreset,
		defaultSettings.Preset,
		fmt.Sprintf("use a built-in preset. Valid values: %s", ccss),
	)

	// Word List Flags
	rootCmd.Flags().String(
		option.ConfigKeyWordList,
		defaultSettings.WordList,
		fmt.Sprintf("use a built-in list of words. Valid values: %s", wlcss),
	)

	// Passwords Flags
	rootCmd.Flags().Int(
		option.ConfigKeyNumPasswords,
		defaultSettings.NumPasswords,
		"number of passwords to generate, valid values: 1+",
	)

	// Word Flags
	rootCmd.Flags().Int(
		option.ConfigKeyNumWords,
		defaultSettings.NumWords,
		"number of words, valid values: 2+",
	)
	rootCmd.Flags().String(
		option.ConfigKeyCaseTransform,
		defaultSettings.CaseTransform,
		fmt.Sprintf("case transformation, allowed values: %s", ttcss),
	)
	rootCmd.Flags().Int(
		option.ConfigKeyWordLengthMax,
		defaultSettings.WordLengthMax,
		"maximum word length, valid values: 1+",
	)
	rootCmd.Flags().Int(
		option.ConfigKeyWordLengthMin,
		defaultSettings.WordLengthMin,
		"minimum word length, valid values: 1+",
	)

	// Separator Flags
	rootCmd.Flags().StringSlice(
		option.ConfigKeySeparatorAlphabet,
		[]string{},
		fmt.Sprintf("comma-separated list of characters to separate password parts, example values: %s", sccss),
	)
	rootCmd.Flags().String(
		option.ConfigKeySeparatorCharacter,
		defaultSettings.SeparatorCharacter,
		fmt.Sprintf("character to separate password parts, example values: %s", sco),
	)

	// Padding Flags
	rootCmd.Flags().Int(
		option.ConfigKeyPadToLength,
		defaultSettings.PadToLength,
		"length to pad the password to, will be ignored if less than the generated password length, valid values: 0+",
	)
	rootCmd.Flags().String(
		option.ConfigKeyPaddingCharacter,
		defaultSettings.PaddingCharacter,
		fmt.Sprintf("character to pad the password with, example values: %s", pco),
	)
	rootCmd.Flags().Int(
		option.ConfigKeyPaddingCharactersAfter,
		defaultSettings.PaddingCharactersAfter,
		"number of characters to pad after the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		option.ConfigKeyPaddingCharactersBefore,
		defaultSettings.PaddingCharactersBefore,
		"number of characters to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		option.ConfigKeyPaddingDigitsAfter,
		defaultSettings.PaddingDigitsAfter,
		"number of digits to pad after the password, valid values: 0+",
	)
	rootCmd.Flags().Int(
		option.ConfigKeyPaddingDigitsBefore,
		defaultSettings.PaddingDigitsBefore,
		"number of digits to pad before the password, valid values: 0+",
	)
	rootCmd.Flags().String(
		option.ConfigKeyPaddingType,
		defaultSettings.PaddingType,
		fmt.Sprintf("padding type, allowed values: %s", ptcss),
	)
	rootCmd.Flags().StringSlice(
		option.ConfigKeySymbolAlphabet,
		[]string{},
		fmt.Sprintf("comma-separated list of characters to pad the password with, example values: %s", sccss),
	)
}
